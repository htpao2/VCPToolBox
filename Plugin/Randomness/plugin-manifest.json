{
  "name": "Randomness",
  "displayName": "随机事件生成器",
  "version": "5.1.0",
  "description": "一个多功能后端插件，用于生成各种可信的随机事件。支持无状态的单次随机事件（如抽牌、掷骰）和有状态的、可持久化的牌堆管理（创建、抽取、重置、销毁），适用于需要连续操作的场景。",
  "pluginType": "synchronous",
  "entryPoint": {
    "type": "python",
    "command": "python main.py"
  },
  "communication": {
    "protocol": "stdio"
  },
  "configSchema": {
    "TAROT_DECK_PATH": { "type": "string", "description": "Path to the tarot deck JSON data file.", "default": "Plugin/Randomness/data/tarot_deck.json" },
    "RUNE_SET_PATH": { "type": "string", "description": "Path to the rune set JSON data file.", "default": "Plugin/Randomness/data/rune_set.json" },
    "POKER_DECK_PATH": { "type": "string", "description": "Path to the poker deck JSON data file.", "default": "Plugin/Randomness/data/poker_deck.json" },
    "TAROT_SPREADS_PATH": { "type": "string", "description": "Path to the tarot spreads JSON data file.", "default": "Plugin/Randomness/data/tarot_spreads.json" }
  },
  "capabilities": {
    "invocationCommands": [
      {
        "command": "createDeck",
        "description": "创建一个新的、有状态的牌堆实例。\n- **调用示例**: `VCP>Randomness.createDeck deckName=poker deckCount=2`\n- **返回结果 (`result`) 示例**: `{\"deckId\": \"...\", \"deckName\": \"poker\", \"totalCards\": 104, \"remainingCards\": 104}`",
        "parameters": [
          { "name": "deckName", "type": "string", "description": "要使用的牌堆名称。可用选项: 'poker', 'tarot'。", "optional": false },
          { "name": "deckCount", "type": "integer", "description": "要混合在一起的牌堆数量。", "optional": true, "default": 1 }
        ]
      },
      {
        "command": "createCustomDeck",
        "description": "根据用户提供的任意卡牌列表创建一个新的、有状态的牌堆实例。\n- **调用示例**: `VCP>Randomness.createCustomDeck cards=[\"A\", \"B\"] deckName=MyDeck`\n- **返回结果 (`result`) 示例**: `{\"deckId\": \"...\", \"deckName\": \"MyDeck\", \"totalCards\": 2, \"remainingCards\": 2}`",
        "parameters": [
          { "name": "cards", "type": "array", "description": "一个包含卡牌的数组。", "optional": false },
          { "name": "deckName", "type": "string", "description": "为这个自定义牌堆指定一个名称。", "optional": true, "default": "custom" }
        ]
      },
      {
        "command": "drawFromDeck",
        "description": "从一个已创建的、有状态的牌堆实例中抽取指定数量的牌。\n- **调用示例**: `VCP>Randomness.drawFromDeck deckId=... count=2`\n- **返回结果 (`result`) 示例**: `{\"deckId\": \"...\", \"drawnCards\": [\"KS\", \"AH\"], \"remainingCards\": 50}`",
        "parameters": [
          { "name": "deckId", "type": "string", "description": "由 createDeck 命令返回的牌堆唯一ID。", "optional": false },
          { "name": "count", "type": "integer", "description": "要抽取的牌的数量。", "optional": true, "default": 1 }
        ]
      },
      {
        "command": "resetDeck",
        "description": "重置一个指定的牌堆实例，将所有已抽出的牌放回牌堆并重新洗牌。\n- **调用示例**: `VCP>Randomness.resetDeck deckId=...`\n- **返回结果 (`result`) 示例**: `{\"deckId\": \"...\", \"status\": \"reset_success\", \"remainingCards\": 52}`",
        "parameters": [ { "name": "deckId", "type": "string", "description": "要重置的牌堆的唯一ID。", "optional": false } ]
      },
      {
        "command": "destroyDeck",
        "description": "销毁一个指定的牌堆实例，将其从内存中移除。\n- **调用示例**: `VCP>Randomness.destroyDeck deckId=...`\n- **返回结果 (`result`) 示例**: `{\"deckId\": \"...\", \"status\": \"destroyed\"}`",
        "parameters": [ { "name": "deckId", "type": "string", "description": "要销毁的牌堆的唯一ID。", "optional": false } ]
      },
      {
        "command": "queryDeck",
        "description": "查询一个指定的牌堆实例的状态。\n- **调用示例**: `VCP>Randomness.queryDeck deckId=...`\n- **返回结果 (`result`) 示例**: `{\"deckId\": \"...\", \"remainingCards\": 50, \"drawnCardsCount\": 2, \"totalCards\": 52}`",
        "parameters": [ { "name": "deckId", "type": "string", "description": "要查询的牌堆的唯一ID。", "optional": false } ]
      },
      {
        "command": "getCards",
        "description": "[无状态] 从一个指定类型的完整牌堆中，进行一次性的洗牌并抽取指定数量的牌。\n- **调用示例**: `VCP>Randomness.getCards deckName=poker count=2`\n- **返回结果 (`result`) 示例**: `{\"cards\": [\"QC\", \"10H\"]}`",
        "parameters": [
          { "name": "deckName", "type": "string", "description": "要使用的牌堆名称。可用选项: 'poker', 'tarot'。", "optional": false },
          { "name": "count", "type": "integer", "description": "要抽取的牌的数量。", "optional": true, "default": 1 }
        ]
      },
      {
        "command": "rollDice",
        "description": "执行一个复杂的TRPG风格的掷骰表达式，支持括号和数学运算。\n- **简单调用示例**: `VCP>Randomness.rollDice diceString=\"2d6+5\"`\n- **复杂调用示例**: `VCP>Randomness.rollDice diceString=\"(4d6kh3+5)*2\"`\n- **返回结果 (`result`) 示例**: `{\"expression\": \"(4d6kh3+5)*2\", \"total\": 38, \"calculation_steps\": [...]}`",
        "parameters": [
          { "name": "diceString", "type": "string", "description": "要执行的掷骰表达式。", "optional": false },
          { "name": "format", "type": "string", "description": "输出格式。'text' (默认) 或 'ascii'。", "optional": true, "default": "text" }
        ]
      },
      {
        "command": "drawTarot",
        "description": "[无状态] 从塔罗牌库中抽牌，支持多种预设牌阵。\n- **调用示例**: `VCP>Randomness.drawTarot spread=three_card`\n- **返回结果 (`result`) 示例**: `{\"type\": \"tarot_draw\", \"spreadName\": \"three_card\", \"cards\": [{\"name\": \"The Fool\", ...}, ...]}`",
        "parameters": [
          { "name": "spread", "type": "string", "description": "要使用的牌阵名称。", "optional": true },
          { "name": "count", "type": "integer", "description": "[兼容旧版] 抽牌数量。", "optional": true },
          { "name": "allowReversed", "type": "boolean", "description": "是否允许出现逆位牌。", "optional": true, "default": true }
        ]
      },
      {
        "command": "castRunes",
        "description": "[无状态] 从符文集中抽取指定数量的卢恩符文。\n- **调用示例**: `VCP>Randomness.castRunes count=3`\n- **返回结果 (`result`) 示例**: `{\"type\": \"rune_cast\", \"runes\": [\"Fehu\", \"Uruz\", \"Ansuz\"]}`",
        "parameters": [ { "name": "count", "type": "integer", "description": "要抽取的卢恩符文数量。", "optional": true, "default": 1 } ]
      },
      {
        "command": "selectFromList",
        "description": "[无状态] 从一个给定的任意列表中随机抽取一个或多个项目。\n- **调用示例**: `VCP>Randomness.selectFromList items=[\"A\", \"B\"] count=1`\n- **返回结果 (`result`) 示例**: `{\"selection\": [\"B\"]}`",
        "parameters": [
          { "name": "items", "type": "array", "description": "从中进行选择的项目的数组。", "optional": false },
          { "name": "count", "type": "integer", "description": "要选择的项目的数量。", "optional": true, "default": 1 },
          { "name": "withReplacement", "type": "boolean", "description": "是否允许重复抽取。", "optional": true, "default": false }
        ]
      },
      {
        "command": "getRandomDateTime",
        "description": "[无状态] 在一个指定的开始和结束日期/时间范围内，生成一个随机的时间点。\n- **调用示例**: `VCP>Randomness.getRandomDateTime end=\"2025-12-31T23:59:59Z\"`\n- **返回结果 (`result`) 示例**: `{\"datetimeStr\": \"2025-07-22 10:30:59\"}`",
        "parameters": [
          { "name": "start", "type": "string", "description": "ISO 8601 格式的起始时间。", "optional": true },
          { "name": "end", "type": "string", "description": "ISO 8601 格式的结束时间。", "optional": true },
          { "name": "format", "type": "string", "description": "输出的日期时间格式。", "optional": true }
        ]
      }
    ]
  },
  "webSocketPush": {
    "enabled": true,
    "usePluginResultAsMessage": false,
    "messageType": "RandomEventResult"
  }
}